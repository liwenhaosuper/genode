#
# \brief  Example for using the terminal_mux server over UART
# \author Norman Feske
# \date   2013-02-20
#

#
# On Linux, we don't have a UART driver, on which this run script depends.
#
if {[have_spec linux]} { puts "Run script does not support Linux"; exit 0 }

set build_components {
	core init noux/minimal lib/libc_noux app/cli_monitor test/bomb test/signal
	drivers/timer drivers/uart server/terminal_mux server/terminal_log
	l4linux
}

build $build_components

create_boot_directory

append config {
	<config>
		<parent-provides>
			<service name="ROM"/>
			<service name="LOG"/>
			<service name="CAP"/>
			<service name="RAM"/>
			<service name="RM"/>
			<service name="CPU"/>
			<service name="PD"/>
			<service name="IRQ"/>
			<service name="IO_PORT"/>
			<service name="IO_MEM"/>
			<service name="SIGNAL"/>
		</parent-provides>
		<default-route>
			<any-service> <any-child/> <parent/> </any-service>
		</default-route>
		<start name="timer">
			<resource name="RAM" quantum="1M"/>
			<provides><service name="Timer"/></provides>
			<route> <any-service> <parent/> </any-service> </route>
		</start>
		<start name="uart_drv">}

# use kernel debugger as UART on Fiasco.OC
append_if [have_spec foc] config {
			<binary name="uart_drv"/>}

append config {
			<resource name="RAM" quantum="1M"/>
			<provides>
				<service name="Uart"/>
				<service name="Terminal"/>
			</provides>
			<config> }

# on Fiasco.OC the kdb_uart_drv is always UART 0
append_if [have_spec foc] config {
				<policy label="terminal_mux" uart="1" detect_size="yes"/> }

# on all other kernels, direct terminal_mux to UART 1 (Qemu stdio, see below)
append_if [expr ![have_spec foc]] config {
				<policy label="terminal_mux" uart="1" detect_size="yes"/> }

append config {
			</config>
			<route> <any-service> <parent/> <any-child/> </any-service> </route>
		</start>
		<start name="terminal_mux">
			<resource name="RAM" quantum="4M"/>
			<provides>
				<service name="Terminal"/>
			</provides>
			<route>
				<any-service> <child name="uart_drv" /> <parent/> <any-child /> </any-service>
			</route>
		</start>
		<!--<start name="terminal_log">
			<resource name="RAM" quantum="2M"/>
			<provides>
				<service name="LOG"/>
			</provides>
			<route>
				<any-service> <child name="terminal_mux" /> <any-child/> <parent/> </any-service>
			</route>
		</start>-->
		<start name="cli_monitor">
			<resource name="RAM" quantum="1G"/>
			<config>
				<subsystem name="l4linux" help="L4Linux">
					<binary name="init"/>
					<resource name="RAM" quantum="124M"/>
					<config>
						<parent-provides>
							<service name="ROM"/>
							<service name="RAM"/>
							<service name="CAP"/>
							<service name="PD"/>
							<service name="RM"/>
							<service name="CPU"/>
							<service name="LOG"/>
							<service name="SIGNAL"/>
							<service name="Timer"/>
							<service name="Terminal"/>
						</parent-provides>
						<start name="l4linux">
							<resource name="RAM" quantum="1G"/>
							<config args="mem=100M console=ttyS0 l4x_rd=initrd.gz">
								<ram chunk_size="512M"/>
							</config>
							<route> <any-service> <parent/> </any-service> </route>
						</start>
					</config>
				</subsystem>
			</config>
			<route>
				<any-service> <child name="terminal_mux" /> <any-child/> <parent/> </any-service>
			</route>
		</start>
	</config>
}

install_config $config


#
# Boot modules
#

# generic modules
set boot_modules {
	core init timer ld.lib.so noux terminal_mux terminal_log uart_drv
	test-signal cli_monitor
	libc.lib.so libc_noux.lib.so libc_terminal.lib.so ncurses.lib.so
	l4linux initrd.gz
}

lappend_if [have_spec foc] boot_modules kdb_uart_drv

if {[have_spec x86]} {
	set uri "http://genode.org/files/release-11.11/l4lx/initrd-ia32.gz"
} elseif {[have_spec arm]} {
	set uri "http://genode.org/files/release-11.11/l4lx/initrd-arm.gz"
}
if {![file exists bin/initrd.gz]} {
	puts "Download initramfs ..."
	exec >& /dev/null wget -c -O bin/initrd.gz $uri
}

#set fiasco_serial_esc_arg ""

build_boot_image $boot_modules

append qemu_args " -m 512"
append qemu_args " -nographic "

#
# On Fiasco.OC, we use only one UART via the kernel debugger.
# On all other kernels, we write the core debug output to the kdb.log file,
# and use qemu's stdio as the UART used by terminal_mux.
#
append_if [expr ![have_spec foc]] qemu_args " -serial file:kdb.log "
append qemu_args " -serial telnet:localhost:5555,server -serial mon:stdio "
#append qemu_args " -serial file:kdb.log -serial mon:stdio "

run_genode_until forever
