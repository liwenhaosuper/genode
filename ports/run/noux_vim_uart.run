#
# Uncomment the following line when working on the VIM source code. Otherwise,
# VIM may get recompiled, yet it does not get reinstalled into 'bin/vim'.
#
#exec rm -rf noux-pkg/vim bin/vim

set build_components {
	core init drivers/timer noux/minimal lib/libc_noux
	drivers/uart
}
lappend build_components noux-pkg/vim
lappend build_components test/libports/ncurses

build $build_components

exec tar cfv bin/vim.tar -h -C bin/vim .

create_boot_directory

append config {
	<config verbose="yes">
		<parent-provides>
			<service name="ROM"/>
			<service name="LOG"/>
			<service name="CAP"/>
			<service name="RAM"/>
			<service name="RM"/>
			<service name="CPU"/>
			<service name="PD"/>
			<service name="IRQ"/>
			<service name="IO_PORT"/>
			<service name="IO_MEM"/>
			<service name="SIGNAL"/>
		</parent-provides>
		<default-route>
			<any-service> <any-child/> <parent/> </any-service>
		</default-route>
		<start name="timer">
			<resource name="RAM" quantum="1M"/>
			<provides><service name="Timer"/></provides>
		</start> }

append config {
		<start name="uart_drv">
		   <resource name="RAM" quantum="1M"/>
           <provides><service name="Terminal"/></provides>
           <config><policy label="noux" uart="1"/></config>
        </start>
		<start name="noux">
			<resource name="RAM" quantum="1G"/>
			<config>
				<fstab> <tar name="vim.tar" /> </fstab>
				<start name="/bin/vim">
					<env name="TERM" value="linux" />

					<!-- Deactivate the loading of plugins. Otherwise, vim will
					     attempt to use a sub shell for pattern matching -->
					<arg value="--noplugin" />

					<!-- Do not use swap file. Any attempt to create of would
					     fail because we are on a read-only file system -->
					<arg value="-n" />

					<!-- Use the nocompatible mode, which is much nicer than
					     the plain vi mode -->
					<arg value="-N" />

					<!-- Permanently display status bar -->
					<arg value="--cmd" />
					<arg value="set laststatus=2" />

					<!-- Enable highlighted search results -->
					<arg value="--cmd" />
					<arg value="set hls" />

				</start>
			</config>
		</start>
	</config>
}

install_config $config


#
# Boot modules
#

# generic modules
set boot_modules {
	core init timer ld.lib.so noux uart_drv
	libc.lib.so libm.lib.so libc_noux.lib.so ncurses.lib.so
	vim.tar
}

build_boot_image $boot_modules

append qemu_args " -serial unix:/tmp/qemu-pipe,server,nowait "
append qemu_args " -serial mon:stdio "

run_genode_until forever

exec rm bin/vim.tar
